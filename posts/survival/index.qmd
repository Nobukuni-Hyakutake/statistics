---
title: "ワイブル近似"
author: "Nobukuni Hyakutake"
date: "2023-02-20"
date-format: "iso"
categories: [R,Python]
---

![](aqua.jpeg)

# 目的

寿命データを最尤推定法でワイブル関数に近似します。

# 解析するデータの読み込み

寿命のデータ

```{r}
library(tidyverse)
library(plotly)
library(gt)
dsu01<-read_csv("
  life
  28
  30
  32
  30
  25
  27
  24
  23
  29
  29
  29
  31
  38
  33
  32
  29
  30
  18
  28
  28
  24
  23
  28
  29
  27
  26
  28
  28
  28
  27
  ",show_col_types = FALSE
)
dsu11<-count(dsu01,life) |> 
  mutate(n=n/sum(n))
f1<-plot_ly(x=dsu11$life,y=dsu11$n,type='bar',name="Actual")
f1
```


# ワイブルの確率密度関数

$$
f(t)=\frac{m}{\eta}\left(\frac{t}{\eta}\right)^{m-1}e^{-\left(\frac{t}{\eta}\right)^m}
$$

# Rでのワイブル近似

## パッケージの読み込み

```{r}
library(survival)
```

## ワイブルのパラメーターを算出

survregを使う。

```{r}
t<-survreg(Surv(dsu01$life)~1, dist="weibull")
```

survregの結果は、上述の確率密度関数のパラメーターとして使うには換算する必要がある。

$m$ 

```{r}
m_fit<-1/t$scale
m_fit
```

$\eta$

```{r}
eta_fit<-exp(unname(t$coefficients))
eta_fit
```

## グラフ化

```{r}
tsr<-c(1:max(dsu01$life))
ttr<-str_c("Scale parameter η: ",as.character(round(eta_fit,3)),", Shape parameter m: ",as.character(round(m_fit,3)))
f2<-f1|> 
  add_trace(x=tsr,y=dweibull(tsr,shape=m_fit,scale=eta_fit),type="scatter",mode="line",name="Weibull fit") |>
  layout(title="Weibull fit with 'survival' package - R") |> 
  add_annotations(
    x= 0.03,
    y= 0.95,
    xref = "paper",
    yref = "paper",
    text = ttr,
    showarrow=FALSE)
f2
```

## 複数タイプから一気にηとmを計算

```{r}
t3<-read_csv("
type,life
a,5
b,4
a,5
a,6
b,3
b,2
a,4
b,2
",show_col_types = FALSE)

t4<-split(t3,t3$type)

mm2<-function(i){
  t<-survreg(Surv(i$life)~1, dist="weibull")
  t1<-tibble(eta=exp(unname(t$coefficients)),m=1/t$scale)
  return(t1)
}

qq3<-map(t4,mm2) |> 
  bind_rows(.id="id") |> 
  rename(type=id) |> 
  arrange(type)
gt(qq3)
```


## R version

```{r}
R.version.string
```
# Pythonでのワイブル近似

```{python}
import numpy as np
import pandas as pd
from reliability.Fitters import Fit_Weibull_2P
import plotly.graph_objects as go
```


## 関数定義

pythonはワイブル関数の自作が必要

```{python}
def weibull_d(m,t,eta):
  k=(m/eta)*(t/eta)**(m-1)*np.exp(-1*((t/eta)**m))
  return k
```

## フィット

結果詳細。Alphaは尺度パラメーターη、Betaは形状パラメーターmに相当する。

```{python}
dsu02=r.dsu01
life_max=int(max(dsu02['life']))
dsu03=dsu02['life'].values.tolist()
wb2 = Fit_Weibull_2P(failures=dsu03)
```

## グラフ化

```{python}
tt="Scale parameter η: "+str(round(wb2.alpha,3))+", Shape parameter m: "+str(round(wb2.beta,3))
ts=np.arange(1,life_max+1)
ta=r.dsu11
fig0201=go.Bar(
        x=ta['life'], y=ta["n"],name='Actual',
        marker={"color": "blue"}
        )
fig0202=go.Scatter(
        x=ts, y=weibull_d(wb2.beta,ts,wb2.alpha), name='Weibull fit',
        line={"color": "orange"},
    )
layout=go.Layout(
        title={"text":"Weibull fit with 'leliability' package - Python "})
fig04=go.Figure(data=[fig0201,fig0202],layout=layout)
fig04=fig04.update_layout(annotations=[
  go.layout.Annotation(
    xref="paper",
    yref="paper",
    x=0.03,
    y=0.95,
    showarrow=False,
    text=tt
)
])
fig04
```

## 複数タイプから一気にηとmを計算

```{python}
pt1=pd.DataFrame([
["a",5],
["b",4],
["a",5],
["a",6],
["b",3],
["b",2],
["a",4],
["b",2]
])
pt1.columns=["type","life"]
pt2=pt1.drop_duplicates("type")
```

### タイプごとの結果

```{python}
def mp(i):
  print("type: "+i)
  dpu01=pt1.loc[pt1["type"]==i]
  dpu02=dpu01['life'].values.tolist()
  wb21 = Fit_Weibull_2P(failures=dpu02)
  dpu03=pd.DataFrame({"type":[i],"eta":[wb21.alpha],"m":[wb21.beta]})
  return dpu03

dpu04=pd.concat((mp(r) for r in pt2["type"]),ignore_index=True)
```

### まとめ結果

```{python}
dpu04
```


## 参考サイト

[Python package reliability - Fitting a specific distribution to data](https://reliability.readthedocs.io/en/latest/Fitting%20a%20specific%20distribution%20to%20data.html)
